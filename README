        PostgreSQL database session save handler module

*WARNING*
This session save handler is EXPERIMENTAL. Anything may be 
changed/deleted/added without notice. It is considered as alpha.

[What is it]

session_pgsql is an additional session save handler module. It
provides session storage using PostgreSQL database server(s). 

 - C implantation of session save handler with PostgreSQL. It could
   twice as fast or more compare to script version of save handler.
 - Automatic session table creation.
 - Better garbage collection.
 - Multiple PostgreSQL servers support.
 - Automatic db server failover(switching) when there is trouble.
 - Automatic db server load balancing where there are multiple
   PostgreSQL servers.
 - Automatic session table vacuum.

It is design to scale any size of web sites.

[How to use]

To compile PHP with mod_pgsql, you need "--with-session-pgsql[=DIR]"
when you configure PHP. [=DIR] is installation path for
PostgreSQL. You don't have to compile PHP with PostgreSQL module, but
your system must have libpq and headers installed.
It also uses libmm your system must have libmm and headers installed
to compile.

Once you have successfully installed session_pgsql (and PHP of course)
and PostgreSQL to localhost. All you have to do is (as postgres super user)

% createuser nobody
% createdb php_session

In your php.ini
session.save_handler = pgsql
or
In your script (make sure you call it *first* and before staring session)
session_module_name('pgsql');

session_pgsql connects to local PostgreSQL backend and create session
table automatically if needed. If you would like to use remote PostgreSQL
server or even multiple PostgreSQL servers, edit session_pgsql.db php.ini
configuration directive.

NOTE: It cannot be used with CGI/CLI binary or dl() or loading from .htaccess.

[php.ini settings]

Following php.ini directives has special meanings for mod_pgsql

session.save_handler     
  "pgsql" for session_pgsql session.

session_pgsql.db          
  Valid PostgreSQL database connection string. 
  For example, "host=localhost dbname=php_session user=nobody" can
  be set. This example is the default.
  You can specify multiple PostgreSQL by separating ";". e.g.
  "host=server1 dbname=php_session user=nobody;host=server2 dbname=php_session user=nobody"
  If multiple servers are set, session_pgsql automatically balance 
  db server loads. If one of session db server fails, it will try to
  use available db server automatically.
  NOTE: database name must be "php_session". Other connection options
  may be changed.

session_pgsql.use_app_vars 
  Use application level variable ($_APP) or not.
  Use different session name to change application.
  i.e. use session_name('AppName')
  Use of application variable has severe performance penalty.
  Default is off  

session_pgsql.create_table
  Automatically create session and application variable table
  if set to on. session_pgsql creates tables, php_session and php_app_vers,
  in the database. Default is on.

session_pgsql.failover_mode
  If failover_mode is set to on, it will always use 1st db server
  and if 1st server fails, it will use next available db server.
  create session and application variable table
  if set to on. If this option is enabled, load balancing session 
  db server will not be enabled. Default is off.
  NOTE: session_pgsql do not mirror session data. It just switch
  to other database server to continue web services.

session_pgsql.gc_interval
  How often perform GC in seconds. Default is 3600 seconds.
  If you set multiple db servers to session_pgsql.db, set only
  one of your web server to prevent unneeded garbage collections.
  It is good idea set to 0 (disable) and perform garbage collection
  by using cron or like in db server if you have multiple web servers
  accessed to the session db server(s).

session_pgsql.vacuum_interval
  How often perform GC in seconds. Default is 18000 seconds.
  If you set multiple db servers to session_pgsql.db, set only
  one of your web server to prevent unneeded vacuum operations.
  It is good idea set to 0 (disable) and perform vacuum
  by using cron or like in db server if you have multiple web servers
  accessed to the session db server(s).

[Known Problem]
Please report problem to the author.

[Session Table Definition]

CREATE TABLE php_session (
  sess_id            text,
  sess_name          text,
  sess_data          text,
  sess_created       integer,
  sess_modified      integer,
  sess_expire        integer,
  sess_addr_created  text,
  sess_addr_modified text,
  sess_counter       integer,
  sess_error         integer,
  sess_warning       integer,
  sess_notice        integer,
  sess_err_message   text,
  sess_custom        text
);

CREATE INDEX php_session_idx ON php_session USING BTREE (sess_id);

[Application Variable Table Definition]

CREATE TABLE php_app_vars (
  app_modified       integer,
  app_name           text,
  app_vars           text
);
 

NOTE: If you use HASH for index, you'll have deadlock problem when
server load *very* high. Even if it's unlikely to have deadlock under 
normal operation, but it can. DO NOT USE HASH INDEX.

User may *append* additional fields, sess_reserved fields are place
holder for additional feature. Since mod_pgsql accesses field using
field index, user must use this field order.

[ToDo]
 - More efficient application variable handling

[History]
 0.4.1 - 2003/1/16
  - Added all features planned. Alpha release.

 0.4.0 - 2003/1/15
  - Implemented most features that are planned.
   
 0.2.0 - 2002/2/20
  - Added application variable support.

 0.1.0 - 2002/1/12
